<?php

namespace Jinn\Generator;


use Nette\PhpGenerator\ClassType;
use Nette\PhpGenerator\PhpFile;
use Symfony\Component\Mime\Exception\LogicException;

abstract class ClassGenerator
{
    protected GeneratorFactory $factory;
    protected GeneratorConfig $config;
    private string $classNamespace;
    private string $generatedNamespace;

    public function __construct(GeneratorFactory $factory, GeneratorConfig $config, string $namespace)
    {
        $this->factory = $factory;
        $this->config = $config;

        $this->classNamespace = $this->name($config->appNamespace, $namespace);
        $this->generatedNamespace = $this->name($config->generatedNamespace, $namespace);
    }

    protected function modelClass($name) {
        return $this->name($this->config->appNamespace, $this->config->modelNamespace, $name);
    }

    public function name(...$parts) {
        return implode('\\', $parts);
    }

    private function nameToPath($baseFolder, $baseNamespace, $name) {
        if (strpos($name, $baseNamespace . '\\') !== 0) throw new \LogicException("Base namespace '$baseNamespace' not found in class name '$name'");
        $name = $baseFolder . substr($name, strlen($baseNamespace));
        return str_replace('\\', '/', $name) . '.php';
    }

    private function writeLine($message) {
        if ($this->config->output) call_user_func($this->config->output, $message);
    }

    abstract protected function className($definition, $param = null): string;
    abstract protected function generateBaseClass(ClassType $genClass, $classFullName, $definition, $param = null);

    public function generate($definition, $param = null)
    {
        $name = $this->className($definition, $param);
        $genName = 'Base' . $name;
        $genFullName = $this->name($this->generatedNamespace, $genName);

        $genFile = new PhpFile();
        $genFile->addComment("Generated by Jinn. Do not edit.");
        $genNamespace = $genFile->addNamespace($this->generatedNamespace);
        $genClass = $genNamespace->addClass($genName);
        $genClass->setAbstract(true);

        $classFullName = $this->name($this->classNamespace, $name);

        $result = $this->generateBaseClass($genClass, $classFullName, $definition, $param);

        PhpFileWriter::writePhpFile($this->nameToPath($this->config->generatedFolder, $this->config->generatedNamespace, $genFullName), $genFile);
        $this->writeLine("Generated class\t<info>$genName</info>");

        $classFilename = $this->nameToPath($this->config->appFolder, $this->config->appNamespace, $classFullName);
        if (!file_exists($classFilename)) {
            $classFile = new PhpFile();
            $classNamespace = $classFile->addNamespace($this->classNamespace);
            $classNamespace->addUse($genFullName);
            $class = $classNamespace->addClass($name);
            $class->setExtends($genFullName);

            PhpFileWriter::writePhpFile($classFilename, $classFile);
            $this->writeLine("Generated class\t<info>{$name}</info>");
        } else {
            $this->writeLine("Skipped class\t<info>{$name}</info>");
        }

        return $result ?? $classFullName;
    }

}
