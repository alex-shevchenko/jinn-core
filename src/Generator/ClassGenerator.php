<?php

namespace Jinn\Generator;


use Nette\PhpGenerator\PhpFile;

class ClassGenerator
{
    private string $appNamespace;
    private string $generatedNamespace;
    private string $generatedFolder;
    private string $appFolder;
    private $output;

    public function __construct($appNamespace, $appFolder, $generatedNamespace, $generatedFolder, $output = null)
    {
        $this->appNamespace = $appNamespace;
        $this->appFolder = $appFolder;
        $this->generatedNamespace = $generatedNamespace;
        $this->generatedFolder = $generatedFolder;
        $this->output = $output;
    }

    public function name(...$parts) {
        return implode('\\', $parts);
    }

    private function nameToPath($baseFolder, $baseNamespace, $name) {
        $name = str_replace($baseNamespace, $baseFolder, $name);
        return str_replace('\\', '/', $name) . '.php';
    }

    private function writeLine($message) {
        if ($this->output) call_user_func($this->output, $message);
    }

    public function generateClass(string $name, string $namespace, callable $classGenerator)
    {
        $classNamespace = $this->name($this->appNamespace, $namespace);
        $genNamespace = $this->name($this->generatedNamespace, $namespace);
        $className = $name;
        $genName = 'Base' . $name;
        $genFullName = $this->name($genNamespace, $genName);

        $genFile = new PhpFile();
        $genFile->addComment("Generated by Jinn. Do not edit.");
        $genNamespace = $genFile->addNamespace($genNamespace);
        $genClass = $genNamespace->addClass($genName);
        $genClass->setAbstract(true);

        $classFullName = $this->name($classNamespace, $className);
        $classGenerator($genClass, $classFullName);

        PhpFileWriter::writePhpFile($this->nameToPath($this->generatedFolder, $this->generatedNamespace, $genFullName), $genFile);
        $this->writeLine("Generated class\t<info>$genName</info>");

        $classFilename = $this->nameToPath($this->appFolder, $this->appNamespace, $classFullName);
        if (!file_exists($classFilename)) {
            $classFile = new PhpFile();
            $classNamespace = $classFile->addNamespace($classNamespace);
            $classNamespace->addUse($genFullName);
            $class = $classNamespace->addClass($className);
            $class->setExtends($genFullName);

            PhpFileWriter::writePhpFile($classFilename, $classFile);
            $this->writeLine("Generated class\t<info>{$className}</info>");
        } else {
            $this->writeLine("Skipped class\t<info>{$className}</info>");
        }

        return $classFullName;
    }
}
